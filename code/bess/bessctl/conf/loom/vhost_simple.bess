import scapy.all as scapy
import subprocess
import os

VPORT_NAME = 'loom'
VPORT_ADDR = '10.10.1.2/24'

# Reset everything at the start
#XXX: Note: I doubt both of these are necessary or are even considered
# "correct"
bess.reset_all()
bess.resume_all()

# Create a vport as an interface on the host
#TODO: How are queues configured on the vport?
v = PMDPort(name=VPORT_NAME, vdev='virtio_user0,path=/dev/vhost-net,queues=1,queue_size=1024,iface=%s' % VPORT_NAME)
#subprocess.check_call('ip link set tap0 name %s' % VPORT_NAME, shell=True)
subprocess.check_call('ip addr add %s dev %s' % (VPORT_ADDR, VPORT_NAME), shell=True)
subprocess.check_call('ip link set dev %s up' % VPORT_NAME, shell=True)
subprocess.check_call('ip addr add %s dev %s' % (VPORT_ADDR, VPORT_NAME), shell=True)
subprocess.check_call('ip link set dev %s up' % VPORT_NAME, shell=True)
subprocess.check_call('sudo ethtool -K %s tso off' % VPORT_NAME, shell=True)
subprocess.check_call('sudo ethtool -K %s sg off' % VPORT_NAME, shell=True)
subprocess.check_call('sudo ethtool -K %s tx off' % VPORT_NAME, shell=True)

# Connect it to a PMD with 1-txq and 1-rxq
p = PMDPort(port_id=0, num_inc_q=1, num_out_q=1)

# Connect the ports
#TODO: Configure queues instead of ports
# input0::QueueInc(port=myport, qid=0) #This module will read from myport on queue 0
# output0::QueueOut(port=myport, qid=0) #This module will write to myport on queue 0
PortInc(port=p.name) -> PortOut(port=v.name)
PortInc(port=v.name) -> IPChecksum() -> L4Checksum() -> PortOut(port=p.name)

# DEBUG
print('Two ports have been spliced: {} <-> {}'.format(p, v))
