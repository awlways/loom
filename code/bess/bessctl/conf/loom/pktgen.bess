import scapy.all as scapy

pkt_size = int($SN_PKT_SIZE!'1500')
num_ports = int($SN_PORTS!'1')

assert(60 <= pkt_size <= 1522)
assert(1 <= num_ports <= 16)

# generate flows by varying dst IP addr
num_flows = int($SN_FLOWS!'1')
assert(1 <= num_flows <= 256 ** 3)

def build_pkt(size):
    eth = scapy.Ether(src='00:1b:21:73:e8:4c', dst='06:16:3e:1b:72:32')
    ip = scapy.IP(src='192.168.0.1', dst='10.0.0.1')
    udp = scapy.UDP(sport=10001, dport=10002)
    payload = ('hello' + '0123456789' * 200)[:size-len(eth/ip/udp)]
    pkt = eth/ip/udp/payload
    pkt.show()
    return str(pkt)
pkt_templates = [build_pkt(pkt_size)]

ports = [PMDPort(port_id=i, num_inc_q=1, num_out_q=1) \
         for i in range(num_ports)]

for i in range(num_ports):
    src = Source()
    src \
    -> Rewrite(templates=pkt_templates) \
    -> RandomUpdate(fields=[{'offset': 30, 'size': 4, 'min': 0x0a000001, 'max': 0x0a000001 + num_flows - 1}]) \
    -> IPChecksum() \
    -> PortOut(port=ports[i].name)
    #-> QueueOut(port=ports[i].name, qid=0)

    #QueueInc(port=ports[i].name, qid=0) -> Sink()
    PortInc(port=ports[i].name) -> Sink()

