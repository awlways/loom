import scapy.all as scapy
import os

num_tx_ctrlqs = 4
num_tx_dataqs = 4096

C1_NAME = 'loom_test1'
VPORT_C1_NAME = 'loom1'
VPORT_C1_ADDR = '10.10.1.1/24'

C2_NAME = 'loom_test2'
VPORT_C2_NAME = 'loom2'
VPORT_C2_ADDR = '10.10.1.2/24'


# Reset everything at the start
#XXX: Note: I doubt both of these are necessary or are even considered
# "correct"
bess.reset_all()
bess.resume_all()

# Create a vport as an interface on the host
c1_v = LoomVPort(ifname=VPORT_C1_NAME, docker=C1_NAME, ip_addrs=[VPORT_C1_ADDR],
    num_inc_q=1, num_out_q=1,
    num_tx_ctrlqs=num_tx_ctrlqs, num_tx_dataqs=num_tx_dataqs)
c2_v = LoomVPort(ifname=VPORT_C2_NAME, docker=C2_NAME, ip_addrs=[VPORT_C2_ADDR],
    num_inc_q=1, num_out_q=1,
    num_tx_ctrlqs=num_tx_ctrlqs, num_tx_dataqs=num_tx_dataqs)

# Connect the ports
#TODO: Configure queues instead of ports
# input0::QueueInc(port=myport, qid=0) #This module will read from myport on queue 0
# output0::QueueOut(port=myport, qid=0) #This module will write to myport on queue 0
LoomPortInc(port=c1_v.name) -> IPChecksum() -> L4Checksum() -> PortOut(port=c2_v.name)
LoomPortInc(port=c2_v.name) -> IPChecksum() -> L4Checksum() -> PortOut(port=c1_v.name)

# DEBUG
print('Two ports have been spliced: {} <-> {}'.format(c1_v, c2_v))
