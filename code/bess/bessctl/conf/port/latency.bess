# Copyright (c) 2014-2016, The Regents of the University of California.
# Copyright (c) 2016-2017, Nefeli Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# * Neither the names of the copyright holders nor the names of their
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import time

# latency will be high, since the queue builds up
# as the Linux network stack is the bottleneck

v = VPort(loopback=1, rxq_cpus=[1])

Source() -> Timestamp() -> PortOut(port=v.name)
PortInc(port=v.name) -> m::Measure() -> Sink()

last = m.get_summary()

while True:
    bess.resume_all()
    time.sleep(1)
    bess.pause_all()

    now = m.get_summary()
    diff_ts = last.timestamp - now.timestamp
    diff_pkts = (last.packets - now.packets) / diff_ts
    diff_bits = (last.bits - now.bits) / diff_ts
    diff_total_latency_ns = (last.total_latency_ns - now.total_latency_ns) / diff_ts
    last = now

    if diff_pkts >= 1.0:
        ns_per_packet = diff_total_latency_ns / diff_pkts
    else:
        ns_per_packet = 0

    print('%s: %.3f Mpps, %.3f Mbps, rtt_avg: %.3f us, rtt_med: %.3f us, '\
          'rtt_99th: %.3f us, jitter_med: %.3f us, jitter_99th: %.3f us' % \
            (time.ctime(now.timestamp),
             diff_pkts / 1e6,
             diff_bits / 1e6,
             ns_per_packet / 1e3,
             last.latency_50_ns / 1e3,
             last.latency_99_ns / 1e3,
             last.jitter_50_ns / 1e3,
             last.jitter_99_ns / 1e3))
